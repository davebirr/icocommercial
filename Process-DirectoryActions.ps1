<#
.SYNOPSIS
    Processes user actions from directory comparison CSV file.

.DESCRIPTION
    Reads the CSV file generated by Compare-DirectoryStructures.ps1 and executes
    user-specified actions: Copy (C), Delete (D), or Ignore (I).

.PARAMETER ActionCSVPath
    Path to the CSV file containing user actions

.PARAMETER WhatIf
    Shows what actions would be performed without actually executing them

.PARAMETER BackupDirectory
    Directory to backup files before deletion (recommended)

.PARAMETER LogFile
    Path for detailed operation log file

.PARAMETER Force
    Execute actions without confirmation prompts

.EXAMPLE
    .\Process-DirectoryActions.ps1 -ActionCSVPath ".\DirectoryDifferences_Actions.csv" -WhatIf

.EXAMPLE
    .\Process-DirectoryActions.ps1 -ActionCSVPath ".\DirectoryDifferences_Actions.csv" -BackupDirectory "C:\Backup\Migration"

.NOTES
    Author: PowerShell Directory Comparison Toolkit
    Version: 1.0
    Requires: PowerShell 5.1+
#>

[CmdletBinding()]
param(
    [Parameter(Mandatory = $true)]
    [ValidateScript({Test-Path $_ -PathType Leaf})]
    [string]$ActionCSVPath,
    
    [Parameter(Mandatory = $false)]
    [switch]$WhatIf,
    
    [Parameter(Mandatory = $false)]
    [string]$BackupDirectory = "",
    
    [Parameter(Mandatory = $false)]
    [string]$LogFile = "DirectoryActions_$(Get-Date -Format 'yyyyMMdd_HHmmss').log",
    
    [Parameter(Mandatory = $false)]
    [switch]$Force
)

# Logging functions
function Write-ActionLog {
    param(
        [string]$Message,
        [string]$Level = "INFO",
        [string]$LogPath = $LogFile
    )
    
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "[$timestamp] [$Level] $Message"
    
    # Write to console
    Write-Host $logMessage -ForegroundColor $(switch($Level) {
        "SUCCESS" { "Green" }
        "WARNING" { "Yellow" }
        "ERROR" { "Red" }
        "SKIP" { "Cyan" }
        default { "White" }
    })
    
    # Write to log file
    $logMessage | Out-File -FilePath $LogPath -Append -Encoding UTF8
}

function Backup-File {
    param(
        [string]$SourcePath,
        [string]$BackupDir
    )
    
    if (-not $BackupDir) { return $false }
    
    try {
        # Create backup directory structure
        $relativePath = $SourcePath
        if ($SourcePath.Contains(':')) {
            $relativePath = $SourcePath.Substring(3) # Remove C:\ part
        }
        
        $backupPath = Join-Path $BackupDir $relativePath
        $backupParent = Split-Path $backupPath -Parent
        
        if (-not (Test-Path $backupParent)) {
            New-Item -Path $backupParent -ItemType Directory -Force | Out-Null
        }
        
        Copy-Item -Path $SourcePath -Destination $backupPath -Force
        Write-ActionLog "Backed up: $SourcePath -> $backupPath"
        return $true
    }
    catch {
        Write-ActionLog "Failed to backup $SourcePath : $($_.Exception.Message)" "ERROR"
        return $false
    }
}

function Copy-FileWithStructure {
    param(
        [string]$SourcePath,
        [string]$DestinationPath,
        [bool]$IsWhatIf = $false
    )
    
    try {
        if ($IsWhatIf) {
            Write-ActionLog "[WHATIF] Would copy: $SourcePath -> $DestinationPath" "INFO"
            return $true
        }
        
        # Create destination directory if it doesn't exist
        $destDir = Split-Path $DestinationPath -Parent
        if (-not (Test-Path $destDir)) {
            New-Item -Path $destDir -ItemType Directory -Force | Out-Null
            Write-ActionLog "Created directory: $destDir"
        }
        
        # Copy the file
        Copy-Item -Path $SourcePath -Destination $DestinationPath -Force
        Write-ActionLog "Copied: $SourcePath -> $DestinationPath" "SUCCESS"
        return $true
    }
    catch {
        Write-ActionLog "Failed to copy $SourcePath : $($_.Exception.Message)" "ERROR"
        return $false
    }
}

function Remove-FileOrDirectory {
    param(
        [string]$Path,
        [bool]$IsWhatIf = $false,
        [string]$BackupDir = ""
    )
    
    try {
        if ($IsWhatIf) {
            Write-ActionLog "[WHATIF] Would delete: $Path" "WARNING"
            return $true
        }
        
        # Backup before deletion if requested
        if ($BackupDir -and (Test-Path $Path)) {
            $backed = Backup-File -SourcePath $Path -BackupDir $BackupDir
            if (-not $backed) {
                Write-ActionLog "Skipping deletion due to backup failure: $Path" "WARNING"
                return $false
            }
        }
        
        # Remove the item
        if (Test-Path $Path) {
            Remove-Item -Path $Path -Recurse -Force
            Write-ActionLog "Deleted: $Path" "SUCCESS"
            return $true
        } else {
            Write-ActionLog "Path not found (already deleted?): $Path" "WARNING"
            return $true
        }
    }
    catch {
        Write-ActionLog "Failed to delete $Path : $($_.Exception.Message)" "ERROR"
        return $false
    }
}

function Invoke-Actions {
    param(
        [array]$Actions,
        [bool]$IsWhatIf = $false,
        [string]$BackupDir = ""
    )
    
    $stats = @{
        Total = $Actions.Count
        Copied = 0
        Deleted = 0
        Ignored = 0
        Failed = 0
        Skipped = 0
    }
    
    Write-ActionLog "Processing $($Actions.Count) actions..." "SUCCESS"
    
    foreach ($action in $Actions) {
        $actionType = $action.Action.ToUpper().Trim()
        
        if ([string]::IsNullOrWhiteSpace($actionType)) {
            Write-ActionLog "Skipping item with no action specified: $($action.RelativePath)" "SKIP"
            $stats.Skipped++
            continue
        }
        
        switch ($actionType) {
            "C" {
                # Copy operation
                if ($action.Status -eq "OnlyInSource") {
                    # Handle missing source path by reconstructing it
                    $sourcePath = $action.SourcePath
                    if ([string]::IsNullOrWhiteSpace($sourcePath)) {
                        # Try to reconstruct source path from a valid example
                        $validEntry = $actions | Where-Object { -not [string]::IsNullOrWhiteSpace($_.SourcePath) } | Select-Object -First 1
                        if ($validEntry) {
                            # Extract base path from valid entry
                            $basePath = $validEntry.SourcePath
                            $relativePart = $validEntry.RelativePath
                            if ($basePath.EndsWith($relativePart)) {
                                $sourceBasePath = $basePath.Substring(0, $basePath.Length - $relativePart.Length)
                                $sourcePath = Join-Path $sourceBasePath $action.RelativePath
                                Write-ActionLog "Reconstructed source path: $sourcePath" "INFO"
                            }
                        }
                        
                        if ([string]::IsNullOrWhiteSpace($sourcePath)) {
                            Write-ActionLog "Cannot copy - source path is empty and cannot be reconstructed: $($action.RelativePath)" "ERROR"
                            $stats.Failed++
                            continue
                        }
                    }
                    
                    $success = Copy-FileWithStructure -SourcePath $sourcePath -DestinationPath $action.TargetPath -IsWhatIf $IsWhatIf
                    if ($success) { $stats.Copied++ } else { $stats.Failed++ }
                }
                elseif ($action.Status -like "*Difference") {
                    # For differences, copy from source to target (overwrite)
                    $success = Copy-FileWithStructure -SourcePath $action.SourcePath -DestinationPath $action.TargetPath -IsWhatIf $IsWhatIf
                    if ($success) { $stats.Copied++ } else { $stats.Failed++ }
                }
                else {
                    Write-ActionLog "Cannot copy - invalid status for copy operation: $($action.RelativePath) ($($action.Status))" "WARNING"
                    $stats.Skipped++
                }
            }
            
            "D" {
                # Delete operation
                $pathToDelete = ""
                if ($action.Status -eq "OnlyInSource") {
                    $pathToDelete = $action.SourcePath
                }
                elseif ($action.Status -eq "OnlyInTarget") {
                    $pathToDelete = $action.TargetPath
                }
                else {
                    Write-ActionLog "Cannot delete - ambiguous status for delete operation: $($action.RelativePath) ($($action.Status))" "WARNING"
                    $stats.Skipped++
                    continue
                }
                
                if ($pathToDelete) {
                    $success = Remove-FileOrDirectory -Path $pathToDelete -IsWhatIf $IsWhatIf -BackupDir $BackupDir
                    if ($success) { $stats.Deleted++ } else { $stats.Failed++ }
                }
            }
            
            "I" {
                # Ignore operation
                Write-ActionLog "Ignoring: $($action.RelativePath)" "SKIP"
                $stats.Ignored++
            }
            
            default {
                Write-ActionLog "Unknown action '$actionType' for: $($action.RelativePath)" "WARNING"
                $stats.Skipped++
            }
        }
    }
    
    return $stats
}

# Main execution
Write-ActionLog "Starting directory action processing..." "SUCCESS"
Write-ActionLog "CSV File: $ActionCSVPath"
if ($WhatIf) {
    Write-ActionLog "WHATIF MODE - No actual changes will be made" "WARNING"
}
if ($BackupDirectory) {
    Write-ActionLog "Backup Directory: $BackupDirectory"
}

try {
    # Read the CSV file
    Write-ActionLog "Reading action CSV file..."
    $actions = Import-Csv -Path $ActionCSVPath
    
    if (-not $actions -or $actions.Count -eq 0) {
        Write-ActionLog "No actions found in CSV file" "WARNING"
        exit 0
    }
    
    # Filter actions that have been specified
    $actionsToProcess = $actions | Where-Object { 
        -not [string]::IsNullOrWhiteSpace($_.Action) 
    }
    
    if ($actionsToProcess.Count -eq 0) {
        Write-ActionLog "No actions specified in CSV file (Action column is empty)" "WARNING"
        Write-ActionLog "Please open the CSV file and fill in the Action column with C (Copy), D (Delete), or I (Ignore)"
        exit 0
    }
    
    Write-ActionLog "Found $($actionsToProcess.Count) actions to process out of $($actions.Count) total items"
    
    # Show summary of actions
    $copyCount = ($actionsToProcess | Where-Object { $_.Action.ToUpper().Trim() -eq "C" }).Count
    $deleteCount = ($actionsToProcess | Where-Object { $_.Action.ToUpper().Trim() -eq "D" }).Count
    $ignoreCount = ($actionsToProcess | Where-Object { $_.Action.ToUpper().Trim() -eq "I" }).Count
    
    Write-ActionLog "Action Summary:"
    Write-ActionLog "  Copy (C): $copyCount items"
    Write-ActionLog "  Delete (D): $deleteCount items"
    Write-ActionLog "  Ignore (I): $ignoreCount items"
    
    # Confirmation prompt (unless Force is specified)
    if (-not $Force -and -not $WhatIf) {
        Write-Host "`nThis will perform the following actions:" -ForegroundColor Yellow
        Write-Host "  - Copy $copyCount files/directories" -ForegroundColor Green
        Write-Host "  - Delete $deleteCount files/directories" -ForegroundColor Red
        Write-Host "  - Ignore $ignoreCount items" -ForegroundColor Cyan
        
        if ($BackupDirectory) {
            Write-Host "  - Deleted items will be backed up to: $BackupDirectory" -ForegroundColor Blue
        }
        
        $confirmation = Read-Host "`nDo you want to continue? (y/N)"
        if ($confirmation -notmatch '^[yY]') {
            Write-ActionLog "Operation cancelled by user" "WARNING"
            exit 0
        }
    }
    
    # Create backup directory if specified
    if ($BackupDirectory -and -not $WhatIf) {
        if (-not (Test-Path $BackupDirectory)) {
            New-Item -Path $BackupDirectory -ItemType Directory -Force | Out-Null
            Write-ActionLog "Created backup directory: $BackupDirectory"
        }
    }
    
    # Process the actions
    $results = Invoke-Actions -Actions $actionsToProcess -IsWhatIf $WhatIf -BackupDir $BackupDirectory
    
    # Final summary
    Write-ActionLog "`nOPERATION COMPLETE!" "SUCCESS"
    Write-ActionLog "Results Summary:"
    Write-ActionLog "  Total Actions: $($results.Total)"
    Write-ActionLog "  Files Copied: $($results.Copied)"
    Write-ActionLog "  Files Deleted: $($results.Deleted)"
    Write-ActionLog "  Items Ignored: $($results.Ignored)"
    Write-ActionLog "  Items Skipped: $($results.Skipped)"
    Write-ActionLog "  Failed Operations: $($results.Failed)"
    
    if ($results.Failed -gt 0) {
        Write-ActionLog "Some operations failed. Check the log for details." "WARNING"
    }
    
    Write-ActionLog "Detailed log saved to: $LogFile"
    
    if ($WhatIf) {
        Write-ActionLog "This was a WHATIF run - no actual changes were made" "INFO"
        Write-ActionLog "Run without -WhatIf to execute the actions" "INFO"
    }
}
catch {
    Write-ActionLog "Error during action processing: $($_.Exception.Message)" "ERROR"
    exit 1
}
